package org.example;

public class JvmComprehension {

    public static void main(String[] args) {
        // Создание в Stack Memory в пределах одного фрейма, связанного с методом main, примитивной переменной и присваивание ей 1
        int i = 1;
        // Создание объекта класса Object: в куче выделится место под данный класс, после вызовется конструктор (без параметров),
        // который создаст в куче объект данного класса, далее после присвоения переменной "o" типа Object в фрейме, который связан с методом main,
        // создастся ссылка, которая будет указывать где в куче находится данный объект
        Object o = new Object();
        // Создание в Stack Memory в пределах одного фрейма, связанного с методом main, примитивной переменной и присваивание ей 2
        Integer ii = 2;
        // Вызов метода printAll(): в Stack Memory создастся новый фрейм printAll и в этот новый фрейм мы передаем объект "о" и две переменные "i" и "ii".
        // Для создания переменных и объекта в фрейме создастся переменная "о", которая будет указывать на объект Object (который уже создан),
        // и примитивные переменные "i" и "ii", которым будут присвоены значения 1 и 2 соответственно
        printAll(o, i, ii);
        // Вызов системного метода println(), который выведет на консоль "finished"
        System.out.println("finished"); // 7
    }

    private static void printAll(Object o, int i, Integer ii) {
        // Создание в Stack Memory в пределах одного фрейма, связанного с методом printAll, примитивной переменной и присваивание ей 700
        Integer uselessVar = 700;
        // Вызов системного метода println(): создастся новый фрейм в Stack Memory, далее в новом фрейме создастся переменная "o", которая будет ссылаться
        // на объект Object (который уже создан), и примитивные переменные "i" и "ii", которым будут присвоены значения 1 и 2 соответственно.
        // Затем из объекта Object вызовется метод toString(), который вернет нам текстовое описание объекта, т.е. полное наименование класса объекта,
        // у которого вызвали метод и его хешкод + к этому текстовому описанию припишутся 1 и 2
        System.out.println(o.toString() + i + ii);
    }
}